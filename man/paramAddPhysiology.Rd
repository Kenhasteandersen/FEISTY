% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Feisty_parms.R
\name{paramAddPhysiology}
\alias{paramAddPhysiology}
\title{Add Physiological Parameters}
\usage{
paramAddPhysiology(p, ac = 20, bc = -0.25, am = 0.011*365, bm = -0.175, ae = 70, be = -0.2, epsRepro = 0.01, epsAssim = 0.7)
}
\arguments{
\item{p}{The parameter to be updated.}

\item{ac}{Maximum consumption coefficient [g^bc year-1)].}

\item{bc}{Maximum consumption exponent [-].}

\item{am}{Metabolism coefficient [g^bm year-1].}

\item{bm}{Metabolism exponent [-].}

\item{ae}{Clearance rate (encounter rate) coefficient [m2 g^be year-1].}

\item{be}{Clearance rate (encounter rate) exponent [-].}

\item{epsRepro}{Reproduction efficiency [-].}

\item{epsAssim}{Assimilation efficiency [-].}
}
\value{
The updated parameter list \code{p}:
\itemize{
\item Cmax, a vector containing maximum consumption rate values, resources (0) + all size classes of all functional types
\item metabolism, a vector containing standard metabolism values, resources (0) + all size classes of all functional types
\item V, a vector containing clearance rate values, resources (0) + all size classes of all functional types
\item epsRepro, a vector of reproduction efficiency values of each functional types (length is the number of functional types). This value applies on all size classes.
\item epsAssim, the assimilation efficiency value. This value applies on all size classes.
\item Cmaxsave, same as initial values of \code{Cmax}, saved for temperature effect calculation.
\item Vsave, same as initial values of \code{V}, saved for temperature effect calculation.
\item metabolismsave, same as initial values of \code{metabolism}, saved for temperature effect calculation.
}
}
\description{
This function updates the parameter list by adding physiological parameters of all size classes of all functional types.
}
\details{
This function is designed to add physiological parameters of all size classes of all functional types to the parameter list.
It sets the maximum consumption rate, standard metabolism, and clearance rate based on the size.
It ensures there are no NA values in critical parameters. \cr
This function only needs be called once in each simulation. The physiological parameters of all size classes are added to the parameter list at one time.
Generally, this function needs to be called after all functional types are added, i.e., after the last call of the function \code{\link{paramAddGroup}}.
The returned parameter list can be used for further updates.
}
\examples{
# Just an example, data may not make sense.
# Initialize the parameter list
p <- paramInit()
# add three resources
p <- paramAddResource(p,
     names= c("smallZoo", "largeZoo", "smallBenthos"),
     K    = c(100, 120, 80),
     r    = c(1, 1, 1),
     mLower = c(2e-06,0.001, 0.5e-03),
     mUpper = c(0.001, 0.5, 125),
     mc   = c(2e-06*sqrt(500), 0.001*sqrt(500), 0.5e-03*sqrt(250000)))
# add the first functional type
p <- paramAddGroup(p, nStages = 3, mMin = 0.1, mMax = 100, mMature = 100*0.25, mortF=0, mort0 = 0.1, name = "smallfish")
# add the second functional type
p <- paramAddGroup(p, nStages = 6, mMin = 0.1, mMax = 100000, mMature = 100000*0.25, mortF=0, mort0 = 0.1, name = "largefish")
# add physiological parameters for two functional types (smallfish and largefish)
p <- paramAddPhysiology(p, 
     ac = 20, bc = -0.25,       
     am = 0.011*365, bm = -0.175,      
     ae = 70, be = -0.2,        
     epsRepro = 0.01, 
     epsAssim = 0.7)

}
\seealso{
\code{\link{paramTeffect}} Add temperature effects
}
\author{
Ken H. Andersen, Karline Soetaert <karline.soetaert@nioz.nl>, Yixin Zhao
}
