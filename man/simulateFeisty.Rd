% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Feisty_main.R
\name{simulateFeisty}
\alias{simulateFeisty}
\title{Run FEISTY model simulations}
\usage{
simulateFeisty (bCust = FALSE, p = setupBasic(), tEnd = 100, tStep  = 1, times = seq(from=0, to=tEnd, by=tStep),
       yini = p$u0, USEdll = TRUE, Rmodel = derivativesFeistyR, simpleOutput = FALSE)
}
\arguments{
\item{bCust}{Logical flag, indicates whether to use fixed setups (FALSE) or customized setups (TRUE). \cr 
If \code{bCust} is TURE, FEISTY simulations based on customized setups only can be done in FORTRAN, not R. \code{useDLL} input does not work.}

\item{p}{A complete parameter list. \cr 
The parameter of FEISTY setups can be one of the following: \code{\link{setupBasic}}, \code{\link{setupBasic2}}, \code{\link{setVertical}}, and \code{\link{setVertical2}}.
Or, modelers can customize new setups before calling \code{simulateFeisty}.}

\item{tEnd}{The end time for the simulation [year], i.e., simulation period of FEISTY, in years. Time (in years) over which the model should be simulated.}

\item{tStep}{The time step for ODE solving output [year]. Default 1}

\item{times}{A sequence of time points for FEISTY simulations (ODEs solving), required by function \code{\link{ode}}. Generally, it needs nothing, since it will be generated by `tEnd` and `tStep` automatically. \cr
If `NA`, the function returns only the derivative (one time step running) by `Rmodel`. Default \code{\link{derivativesFeistyR}}.}

\item{yini}{A vector containing initial biomass values of all state variables (resources and all size classes). The default is from the setup parameter list, `p$u0`.}

\item{USEdll}{Logical flag, determining whether the ODEs are solved in FORTRAN (`TRUE`) or R (`FALSE`). \cr
The \link{deSolve} package is used for both methods.}

\item{Rmodel}{The R function for computing derivatives, defaults to \code{\link{derivativesFeistyR}}. Generally, should not be changed, unless modelers modify the model profoundly.}

\item{simpleOutput}{Logical flag, specifying whether to return the full output in a large matrix (FALSE) or a simplified version in the list (TRUE).}
}
\value{
A list containing the simulation results. The structure of the list depends on the `simpleOutput` parameter:
If `simpleOutput` is `FALSE`, the function returns a detailed, large matrix with column names:
Row: data of each time point. \cr
Column: time points of result output + biomass of resource & each size class, ... 
\code{f}, \code{mortpred}, \code{g}, \code{Repro}, \code{Fin}, \code{Fout}, 
\code{totMort}, \code{totGrazing}, \code{totLoss}, \code{totRepro}, \code{totRecruit}, and \code{totBiomass} can be found in \code{\link{derivativesFeistyR}}.

If `simpleOutput` is `TRUE`, the function returns a simplified list with the following components:
\itemize{
\item u: a matrix of biomass of each state variable (column) at each time point (row), including resources and all size classes of functional types.
\item R: a matrix of biomass of each resource (column) at each time point (row).
\item B: a matrix of biomass of each size class (column) at each time point (row).
\item t: a vector containing all the simulation time points. From 0 to `tEnd`.
\item nTime: The number of time points.
\item USEdll: from parameter input.
\item p: the parameter list used in the simulation, the same as the input one.
\item `SSBMean`, `SSBMin`, `SSBMax`, and `SSB` can be found in \code{\link{calcSSB}}. \cr
`yieldMean`, `yieldMin`, `yieldMax`, and `yield` can be found in \code{\link{calcYield}}.
}
}
\description{
\code{simulateFeisty} runs simulations of the FEISTY model to resolve the dynamics of marine resources and fish populations over a specified time frame. \cr
It provides options for integrating ordinary differential equations in Fortran or R for four prepared setups (\code{setupBasic}, \code{setupBasic2}, \code{setupVertical}, and \code{setupVertical2}).
It also allows simulations for customized FEISTY setups.
}
\details{
The function runs the FEISTY model simulation over the specified time frame. \cr
The simulation supports published FEISTY setups and their revised versions:
\code{\link{setupBasic}}, \code{\link{setupBasic2}}, \code{\link{setVertical}}, and \code{\link{setVertical2}}, and customized setups by modelers. \cr
The simulation can be conducted by either a FORTRAN-based approach or an R-based approach. Both methods rely on the \link{desolve} package for ODE solving. 
For efficiency, FORTRAN dll should be used. For model development, the R-version is preferred.
Simulations based on customized setups only can be done by the FORTRAN-based approach.
}
\examples{
# Just some examples, data input and output may not make sense.


#-----------------------------------------------
# run model with default parameter settings
#-----------------------------------------------
sim <- simulateFeisty()

colnames(sim)

plot(sim, which = 1:9) # plot first 9 state variables

plot(sim, which=c( "smallZoo",  "largeZoo", "smallBenthos", "largeBenthos",
                  "totBiomass.smallPel", "totBiomass.largePel", "totBiomass.demersals"))
                  
par(mfrow = c(1, 1))
matplot.0D(sim, type= "l", lty=1, ylab="g/m2", log="y", main="Large Pelagics",
         which=c("largePel_1", "largePel_2", "largePel_3", "totBiomass.largePel"))

# -------------------------------------------------------------------------------

# run FEISTY simulation based on setupVertical
# prepare a parameter list
p_V <- setupVertical(szprod = 100, lzprod = 120, bent = 200, region = 2, depth = 1000, photic = 150)
# run the simulation by R and get the simplified output
sim_Vertical_R <- simulateFeisty(bCust = FALSE, p = p_V, tEnd = 1000, tStep = 1,yini = p$u0, USEdll = FALSE, simpleOutput = TRUE)


# run FEISTY simulation based on setupBasic2 by Fortran and get the simplified output
sim__Basic2_F <- simulateFeisty(bCust = FALSE, p = setupBasic2(szprod = 90, lzprod = 100, bprod = 15, depth = 500, Tp = 11, Tb = 9, 
nStages=9, etaMature=0.25, F=0, etaF=0.05), tEnd = 1000, tStep = 1,yini = p$u0, USEdll = TRUE, simpleOutput = TRUE)

# -------------------------------------------------------------------------------

# run FEISTY simulation based on a customized set up

# Initialize the parameter list.
p_cust <- paramInit()

# add three resources
p_cust <- paramAddResource(p_cust,
          names= c("smallZoo", "largeZoo", "smallBenthos"),
          K    = c(100, 120, 80),
          r    = c(1, 1, 1),
          mLower = c(2e-06,0.001, 0.5e-03),
          mUpper = c(0.001, 0.5, 125),
          mc   = c(2e-06*sqrt(500), 0.001*sqrt(500), 0.5e-03*sqrt(250000)))
          
# add two functional types of fish: small pelagic fish and demersal fish           
p_cust <- paramAddGroup(p_cust, mMin=0.001, mMax=250, mMature=NA, 
                        mortF=0,      nStages=6, name="smallPel")
p_cust <- paramAddGroup(p_cust, mMin=0.001, mMax=125000, mMature=NA, 
                        mortF=0, nStages=9, name="demersals")
                        
# add physiological parameters for two functional types
p_cust <- paramAddPhysiology(p_cust, 
          ac = 20, bc = -0.25,       
          am = 0.011*365, bm = -0.175,      
          ae = 70, be = -0.2,        
          epsRepro = 0.01, 
          epsAssim = 0.7)

# Add fishing mortality. The baseline fishing mortality is 2/year.
p_cust <- setFishing(p_cust, F=2, etaF=0.05)

# Add size preference
p_cust$theta <- paramSizepref(p = p_cust,   
                        beta = 400,
                        sigma = 1.3, 
                        type = 1)

# run the simulation for 500 years and get the detailed output. 
sim_cust <- simulateFeisty(bCust = TRUE, p = p_cust, tEnd = 500, simpleOutput = FALSE)

}
\references{
Petrik, C. M., Stock, C. A., Andersen, K. H., van Denderen, P. D., & Watson, J. R. (2019). Bottom-up drivers of global patterns of demersal, forage, and pelagic fishes. Progress in oceanography, 176, 102124.

van Denderen, P. D., Petrik, C. M., Stock, C. A., & Andersen, K. H. (2021). Emergent global biogeography of marine fish food webs. Global Ecology and Biogeography, 30(9), 1822-1834.

de Roos, A. M., Schellekens, T., Van Kooten, T., Van De Wolfshaar, K., Claessen, D., & Persson, L. (2008). Simplifying a physiologically structured population model to a stage-structured biomass model. Theoretical population biology, 73(1), 47-62.

Soetaert, K., Petzoldt, T., & Setzer, R. W. (2010). Solving differential equations in R: package deSolve. Journal of statistical software, 33, 1-25.
}
\seealso{
\code{\link{setupBasic}} The setup following Petrik et al. (2019) \cr
\code{\link{setupBasic2}} A revised setup based on `setupBasic` \cr
\code{\link{setupVertical}} The setup following van Denderen et al. (2021) \cr
\code{\link{setupVertical2}} A revised setup based on `setupVertical` \cr

\code{\link{calcSSB}} Spawning stock biomass calculation \cr
\code{\link{calcYield}} Yield calculation

\code{\link{deSolve}} The package for ODEs solving \cr
\code{\link{derivativesFeistyR}} The derivative function of state variables in FEISTY model

\code{\link{webFeisty}} A shiny interface for visualizing FEISTY model results

\code{\link{plotSimulation}} Plot simulation results including rates, biomass, and SSB data
}
\author{
Ken H. Andersen, Karline Soetaert <karline.soetaert@nioz.nl>, Yixin Zhao
}
